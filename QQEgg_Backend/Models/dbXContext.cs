// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace QQEgg_Backend.Models
{
    public partial class dbXContext : DbContext
    {
        public dbXContext()
        {
        }

        public dbXContext(DbContextOptions<dbXContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TAdvertise> TAdvertise { get; set; }
        public virtual DbSet<TAorders> TAorders { get; set; }
        public virtual DbSet<TCategory> TCategory { get; set; }
        public virtual DbSet<TCorderDetail> TCorderDetail { get; set; }
        public virtual DbSet<TCorders> TCorders { get; set; }
        public virtual DbSet<TCoupons> TCoupons { get; set; }
        public virtual DbSet<TCustomers> TCustomers { get; set; }
        public virtual DbSet<TEtitle> TEtitle { get; set; }
        public virtual DbSet<TEvaluations> TEvaluations { get; set; }
        public virtual DbSet<TManagers> TManagers { get; set; }
        public virtual DbSet<TProducts> TProducts { get; set; }
        public virtual DbSet<TPsite> TPsite { get; set; }
        public virtual DbSet<TPsiteRoom> TPsiteRoom { get; set; }
        public virtual DbSet<TSuppliers> TSuppliers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TAdvertise>(entity =>
            {
                entity.HasKey(e => e.AdvertiseId);

                entity.ToTable("tAdvertise");

                entity.Property(e => e.AdvertiseId).HasColumnName("AdvertiseID");

                entity.Property(e => e.DatePrice).HasColumnType("money");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TAorders>(entity =>
            {
                entity.HasKey(e => e.AorderId);

                entity.ToTable("tAOrders");

                entity.Property(e => e.AorderId).HasColumnName("AOrderID");

                entity.Property(e => e.AdvertiseId).HasColumnName("AdvertiseID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Advertise)
                    .WithMany(p => p.TAorders)
                    .HasForeignKey(d => d.AdvertiseId)
                    .HasConstraintName("FK_tAOrders_tAdvertise");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TAorders)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_tAOrders_tSuppliers");
            });

            modelBuilder.Entity<TCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("tCategory");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TCorderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.RoomId });

                entity.ToTable("tCOrderDetail");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.RoomId).HasColumnName("RoomID");

                entity.Property(e => e.CouponId).HasColumnName("CouponID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.TCorderDetail)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_tCOrderDetail_tCoupons");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TCorderDetail)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tCOrderDetail_tCOrders");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.TCorderDetail)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tCOrderDetail_tPSiteRoom");
            });

            modelBuilder.Entity<TCorders>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("tCOrders");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ReturnDate).HasColumnType("datetime");

                entity.Property(e => e.TakeDate).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TCorders)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_tCOrders_tCustomers");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TCorders)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_tCOrders_tProducts");
            });

            modelBuilder.Entity<TCoupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_Coupons");

                entity.ToTable("tCoupons");

                entity.HasIndex(e => e.Code, "UQ_tCoupons_Code")
                    .IsUnique();

                entity.Property(e => e.CouponId).HasColumnName("CouponID");

                entity.Property(e => e.Available).HasDefaultValueSql("((1))");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TCustomers>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.ToTable("tCustomers");

                entity.HasIndex(e => e.Email, "UQ_tCustomers_Email")
                    .IsUnique();

                entity.HasIndex(e => e.Phone, "UQ_tCustomers_Phone")
                    .IsUnique();

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Birth).HasColumnType("datetime");

                entity.Property(e => e.BlackListed).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCard).HasMaxLength(200);

                entity.Property(e => e.CreditPoints).HasDefaultValueSql("((100))");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            modelBuilder.Entity<TEtitle>(entity =>
            {
                entity.HasKey(e => e.TitleId);

                entity.ToTable("tETitle");

                entity.Property(e => e.TitleId).HasColumnName("TitleID");

                entity.Property(e => e.TitleName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TEvaluations>(entity =>
            {
                entity.HasKey(e => e.EvaluationId);

                entity.ToTable("tEvaluations");

                entity.Property(e => e.EvaluationId).HasColumnName("EvaluationID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Response).HasMaxLength(200);

                entity.Property(e => e.RoomId).HasColumnName("RoomID");

                entity.Property(e => e.TitleId).HasColumnName("TitleID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TEvaluations)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_tEvaluations_tCustomers");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.TEvaluations)
                    .HasForeignKey(d => d.RoomId)
                    .HasConstraintName("FK_tEvaluations_tPSiteRoom");

                entity.HasOne(d => d.Title)
                    .WithMany(p => p.TEvaluations)
                    .HasForeignKey(d => d.TitleId)
                    .HasConstraintName("FK_tEvaluations_tETitle");
            });

            modelBuilder.Entity<TManagers>(entity =>
            {
                entity.HasKey(e => e.ManagerId);

                entity.ToTable("tManagers");

                entity.HasIndex(e => e.Email, "UQ_tManagers_Email")
                    .IsUnique();

                entity.HasIndex(e => e.Phone, "UQ_tManagers_Phone")
                    .IsUnique();

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            modelBuilder.Entity<TProducts>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("tProducts");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TProducts)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_tProducts_tSuppliers");
            });

            modelBuilder.Entity<TPsite>(entity =>
            {
                entity.HasKey(e => e.SiteId);

                entity.ToTable("tPSite");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.Latitude).HasMaxLength(50);

                entity.Property(e => e.Longitude).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OpenTime).HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TPsite)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_tPSite_tProducts");
            });

            modelBuilder.Entity<TPsiteRoom>(entity =>
            {
                entity.HasKey(e => e.RoomId);

                entity.ToTable("tPSiteRoom");

                entity.Property(e => e.RoomId).HasColumnName("RoomID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.DatePrice).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.HourPrice).HasColumnType("money");

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.RoomPassWork).HasMaxLength(200);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.TPsiteRoom)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_tPSiteRoom_tCategory");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.TPsiteRoom)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_tPSiteRoom_tPSite");
            });

            modelBuilder.Entity<TSuppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("tSuppliers");

                entity.HasIndex(e => e.Email, "UQ_tSuppliers_Email")
                    .IsUnique();

                entity.HasIndex(e => e.Phone, "UQ_tSuppliers_Phone")
                    .IsUnique();

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.BlackListed).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPoints).HasDefaultValueSql("((100))");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}